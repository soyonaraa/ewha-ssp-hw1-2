
lass2_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000924  000009b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000924  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800202  00800202  000009ba  2**0
                  ALLOC
  3 .debug_aranges 000000f8  00000000  00000000  000009ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000021a  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f68  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000511  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d6f  00000000  00000000  00002145  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00002eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000375  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000564  00000000  00000000  00003379  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000038dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__vector_23>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000000e4 <port_to_mode_PGM>:
  e4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
  f4:	01 01 00 00 04 01 07 01 0a 01                       ..........

000000fe <port_to_output_PGM>:
  fe:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 10e:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000118 <port_to_input_PGM>:
 118:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
 128:	00 01 00 00 03 01 06 01 09 01                       ..........

00000132 <digital_pin_to_port_PGM>:
 132:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 142:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 152:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 162:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 172:	0b 0b 0b 0b 0b 0b                                   ......

00000178 <digital_pin_to_bit_mask_PGM>:
 178:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 188:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 198:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 1a8:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 1b8:	04 08 10 20 40 80                                   ... @.

000001be <digital_pin_to_timer_PGM>:
 1be:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
 1ea:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000204 <__ctors_end>:
 204:	11 24       	eor	r1, r1
 206:	1f be       	out	0x3f, r1	; 63
 208:	cf ef       	ldi	r28, 0xFF	; 255
 20a:	d1 e2       	ldi	r29, 0x21	; 33
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	cd bf       	out	0x3d, r28	; 61
 210:	00 e0       	ldi	r16, 0x00	; 0
 212:	0c bf       	out	0x3c, r16	; 60

00000214 <__do_copy_data>:
 214:	12 e0       	ldi	r17, 0x02	; 2
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b2 e0       	ldi	r27, 0x02	; 2
 21a:	e4 e2       	ldi	r30, 0x24	; 36
 21c:	f9 e0       	ldi	r31, 0x09	; 9
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a2 30       	cpi	r26, 0x02	; 2
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	12 e0       	ldi	r17, 0x02	; 2
 232:	a2 e0       	ldi	r26, 0x02	; 2
 234:	b2 e0       	ldi	r27, 0x02	; 2
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	af 30       	cpi	r26, 0x0F	; 15
 23c:	b1 07       	cpc	r27, r17
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 b8 01 	call	0x370	; 0x370 <main>
 244:	0c 94 90 04 	jmp	0x920	; 0x920 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <loop>:

// The loop function is called in an endless loop
void loop() {


        if(inc==0){
 24c:	80 91 04 02 	lds	r24, 0x0204
 250:	90 91 05 02 	lds	r25, 0x0205
 254:	89 2b       	or	r24, r25
 256:	31 f5       	brne	.+76     	; 0x2a4 <loop+0x58>

        	analogWrite(FRONT_LED_PIN, val);
 258:	60 91 02 02 	lds	r22, 0x0202
 25c:	70 91 03 02 	lds	r23, 0x0203
 260:	8a e0       	ldi	r24, 0x0A	; 10
 262:	0e 94 ca 02 	call	0x594	; 0x594 <analogWrite>
        	val++;
 266:	80 91 02 02 	lds	r24, 0x0202
 26a:	90 91 03 02 	lds	r25, 0x0203
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	90 93 03 02 	sts	0x0203, r25
 274:	80 93 02 02 	sts	0x0202, r24
        	analogWrite(REAR_LED_PIN, val1);
 278:	60 91 00 02 	lds	r22, 0x0200
 27c:	70 91 01 02 	lds	r23, 0x0201
 280:	89 e0       	ldi	r24, 0x09	; 9
 282:	0e 94 ca 02 	call	0x594	; 0x594 <analogWrite>
        	val1--;
 286:	80 91 00 02 	lds	r24, 0x0200
 28a:	90 91 01 02 	lds	r25, 0x0201
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	90 93 01 02 	sts	0x0201, r25
 294:	80 93 00 02 	sts	0x0200, r24
        	delay(5000/255);
 298:	63 e1       	ldi	r22, 0x13	; 19
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 0f 02 	call	0x41e	; 0x41e <delay>
        }
		if(inc==0&&val==255 && val1==0){
 2a4:	80 91 04 02 	lds	r24, 0x0204
 2a8:	90 91 05 02 	lds	r25, 0x0205
 2ac:	89 2b       	or	r24, r25
 2ae:	99 f4       	brne	.+38     	; 0x2d6 <loop+0x8a>
 2b0:	80 91 02 02 	lds	r24, 0x0202
 2b4:	90 91 03 02 	lds	r25, 0x0203
 2b8:	8f 3f       	cpi	r24, 0xFF	; 255
 2ba:	91 05       	cpc	r25, r1
 2bc:	61 f4       	brne	.+24     	; 0x2d6 <loop+0x8a>
 2be:	80 91 00 02 	lds	r24, 0x0200
 2c2:	90 91 01 02 	lds	r25, 0x0201
 2c6:	89 2b       	or	r24, r25
 2c8:	31 f4       	brne	.+12     	; 0x2d6 <loop+0x8a>
			inc=1;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	90 93 05 02 	sts	0x0205, r25
 2d2:	80 93 04 02 	sts	0x0204, r24
		}
		if(inc==1){
 2d6:	80 91 04 02 	lds	r24, 0x0204
 2da:	90 91 05 02 	lds	r25, 0x0205
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	31 f5       	brne	.+76     	; 0x32e <loop+0xe2>
			analogWrite(FRONT_LED_PIN, val);
 2e2:	60 91 02 02 	lds	r22, 0x0202
 2e6:	70 91 03 02 	lds	r23, 0x0203
 2ea:	8a e0       	ldi	r24, 0x0A	; 10
 2ec:	0e 94 ca 02 	call	0x594	; 0x594 <analogWrite>
			val--;
 2f0:	80 91 02 02 	lds	r24, 0x0202
 2f4:	90 91 03 02 	lds	r25, 0x0203
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	90 93 03 02 	sts	0x0203, r25
 2fe:	80 93 02 02 	sts	0x0202, r24

			analogWrite(REAR_LED_PIN, val1);
 302:	60 91 00 02 	lds	r22, 0x0200
 306:	70 91 01 02 	lds	r23, 0x0201
 30a:	89 e0       	ldi	r24, 0x09	; 9
 30c:	0e 94 ca 02 	call	0x594	; 0x594 <analogWrite>
			val1++;
 310:	80 91 00 02 	lds	r24, 0x0200
 314:	90 91 01 02 	lds	r25, 0x0201
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	90 93 01 02 	sts	0x0201, r25
 31e:	80 93 00 02 	sts	0x0200, r24

			delay(5000/255);
 322:	63 e1       	ldi	r22, 0x13	; 19
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 0f 02 	call	0x41e	; 0x41e <delay>
		}
		if(inc==1&&val==0 && val1==255){
 32e:	80 91 04 02 	lds	r24, 0x0204
 332:	90 91 05 02 	lds	r25, 0x0205
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	89 f4       	brne	.+34     	; 0x35c <loop+0x110>
 33a:	80 91 02 02 	lds	r24, 0x0202
 33e:	90 91 03 02 	lds	r25, 0x0203
 342:	89 2b       	or	r24, r25
 344:	59 f4       	brne	.+22     	; 0x35c <loop+0x110>
 346:	80 91 00 02 	lds	r24, 0x0200
 34a:	90 91 01 02 	lds	r25, 0x0201
 34e:	8f 3f       	cpi	r24, 0xFF	; 255
 350:	91 05       	cpc	r25, r1
 352:	21 f4       	brne	.+8      	; 0x35c <loop+0x110>
			inc=0;
 354:	10 92 05 02 	sts	0x0205, r1
 358:	10 92 04 02 	sts	0x0204, r1
 35c:	08 95       	ret

0000035e <setup>:
   int val1=255;
   int inc=0;

//The setup function is called once at startup of the sketch
void setup() {
	pinMode(FRONT_LED_PIN, OUTPUT);
 35e:	8a e0       	ldi	r24, 0x0A	; 10
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	0e 94 aa 03 	call	0x754	; 0x754 <pinMode>
	pinMode(REAR_LED_PIN, OUTPUT);
 366:	89 e0       	ldi	r24, 0x09	; 9
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	0e 94 aa 03 	call	0x754	; 0x754 <pinMode>
}
 36e:	08 95       	ret

00000370 <main>:
#include <Arduino.h>

int main(void)
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
{
	init();
 374:	0e 94 68 02 	call	0x4d0	; 0x4d0 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 378:	0e 94 af 01 	call	0x35e	; 0x35e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 37c:	c0 e0       	ldi	r28, 0x00	; 0
 37e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 380:	0e 94 26 01 	call	0x24c	; 0x24c <loop>
		if (serialEventRun) serialEventRun();
 384:	20 97       	sbiw	r28, 0x00	; 0
 386:	e1 f3       	breq	.-8      	; 0x380 <main+0x10>
 388:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 38c:	f9 cf       	rjmp	.-14     	; 0x380 <main+0x10>

0000038e <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 38e:	1f 92       	push	r1
 390:	0f 92       	push	r0
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	0f 92       	push	r0
 396:	11 24       	eor	r1, r1
 398:	2f 93       	push	r18
 39a:	3f 93       	push	r19
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 3a4:	80 91 0a 02 	lds	r24, 0x020A
 3a8:	90 91 0b 02 	lds	r25, 0x020B
 3ac:	a0 91 0c 02 	lds	r26, 0x020C
 3b0:	b0 91 0d 02 	lds	r27, 0x020D
	unsigned char f = timer0_fract;
 3b4:	30 91 0e 02 	lds	r19, 0x020E

	m += MILLIS_INC;
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	a1 1d       	adc	r26, r1
 3bc:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 3be:	23 2f       	mov	r18, r19
 3c0:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 3c2:	2d 37       	cpi	r18, 0x7D	; 125
 3c4:	20 f0       	brcs	.+8      	; 0x3ce <__vector_23+0x40>
		f -= FRACT_MAX;
 3c6:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	a1 1d       	adc	r26, r1
 3cc:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 3ce:	20 93 0e 02 	sts	0x020E, r18
	timer0_millis = m;
 3d2:	80 93 0a 02 	sts	0x020A, r24
 3d6:	90 93 0b 02 	sts	0x020B, r25
 3da:	a0 93 0c 02 	sts	0x020C, r26
 3de:	b0 93 0d 02 	sts	0x020D, r27
	timer0_overflow_count++;
 3e2:	80 91 06 02 	lds	r24, 0x0206
 3e6:	90 91 07 02 	lds	r25, 0x0207
 3ea:	a0 91 08 02 	lds	r26, 0x0208
 3ee:	b0 91 09 02 	lds	r27, 0x0209
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	a1 1d       	adc	r26, r1
 3f6:	b1 1d       	adc	r27, r1
 3f8:	80 93 06 02 	sts	0x0206, r24
 3fc:	90 93 07 02 	sts	0x0207, r25
 400:	a0 93 08 02 	sts	0x0208, r26
 404:	b0 93 09 02 	sts	0x0209, r27
}
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	3f 91       	pop	r19
 412:	2f 91       	pop	r18
 414:	0f 90       	pop	r0
 416:	0f be       	out	0x3f, r0	; 63
 418:	0f 90       	pop	r0
 41a:	1f 90       	pop	r1
 41c:	18 95       	reti

0000041e <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
 41e:	9b 01       	movw	r18, r22
 420:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 422:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
 424:	f8 94       	cli
	m = timer0_overflow_count;
 426:	80 91 06 02 	lds	r24, 0x0206
 42a:	90 91 07 02 	lds	r25, 0x0207
 42e:	a0 91 08 02 	lds	r26, 0x0208
 432:	b0 91 09 02 	lds	r27, 0x0209
#if defined(TCNT0)
	t = TCNT0;
 436:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 438:	a8 9b       	sbis	0x15, 0	; 21
 43a:	05 c0       	rjmp	.+10     	; 0x446 <delay+0x28>
 43c:	6f 3f       	cpi	r22, 0xFF	; 255
 43e:	19 f0       	breq	.+6      	; 0x446 <delay+0x28>
		m++;
 440:	01 96       	adiw	r24, 0x01	; 1
 442:	a1 1d       	adc	r26, r1
 444:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 446:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
 448:	ba 2f       	mov	r27, r26
 44a:	a9 2f       	mov	r26, r25
 44c:	98 2f       	mov	r25, r24
 44e:	88 27       	eor	r24, r24
 450:	86 0f       	add	r24, r22
 452:	91 1d       	adc	r25, r1
 454:	a1 1d       	adc	r26, r1
 456:	b1 1d       	adc	r27, r1
 458:	62 e0       	ldi	r22, 0x02	; 2
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	aa 1f       	adc	r26, r26
 460:	bb 1f       	adc	r27, r27
 462:	6a 95       	dec	r22
 464:	d1 f7       	brne	.-12     	; 0x45a <delay+0x3c>
 466:	bc 01       	movw	r22, r24
 468:	2d c0       	rjmp	.+90     	; 0x4c4 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 46a:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
 46c:	f8 94       	cli
	m = timer0_overflow_count;
 46e:	80 91 06 02 	lds	r24, 0x0206
 472:	90 91 07 02 	lds	r25, 0x0207
 476:	a0 91 08 02 	lds	r26, 0x0208
 47a:	b0 91 09 02 	lds	r27, 0x0209
#if defined(TCNT0)
	t = TCNT0;
 47e:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 480:	a8 9b       	sbis	0x15, 0	; 21
 482:	05 c0       	rjmp	.+10     	; 0x48e <delay+0x70>
 484:	ef 3f       	cpi	r30, 0xFF	; 255
 486:	19 f0       	breq	.+6      	; 0x48e <delay+0x70>
		m++;
 488:	01 96       	adiw	r24, 0x01	; 1
 48a:	a1 1d       	adc	r26, r1
 48c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 48e:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 490:	ba 2f       	mov	r27, r26
 492:	a9 2f       	mov	r26, r25
 494:	98 2f       	mov	r25, r24
 496:	88 27       	eor	r24, r24
 498:	8e 0f       	add	r24, r30
 49a:	91 1d       	adc	r25, r1
 49c:	a1 1d       	adc	r26, r1
 49e:	b1 1d       	adc	r27, r1
 4a0:	e2 e0       	ldi	r30, 0x02	; 2
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	aa 1f       	adc	r26, r26
 4a8:	bb 1f       	adc	r27, r27
 4aa:	ea 95       	dec	r30
 4ac:	d1 f7       	brne	.-12     	; 0x4a2 <delay+0x84>
 4ae:	86 1b       	sub	r24, r22
 4b0:	97 0b       	sbc	r25, r23
 4b2:	88 5e       	subi	r24, 0xE8	; 232
 4b4:	93 40       	sbci	r25, 0x03	; 3
 4b6:	c8 f2       	brcs	.-78     	; 0x46a <delay+0x4c>
			ms--;
 4b8:	21 50       	subi	r18, 0x01	; 1
 4ba:	30 40       	sbci	r19, 0x00	; 0
 4bc:	40 40       	sbci	r20, 0x00	; 0
 4be:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
 4c0:	68 51       	subi	r22, 0x18	; 24
 4c2:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 4c4:	21 15       	cp	r18, r1
 4c6:	31 05       	cpc	r19, r1
 4c8:	41 05       	cpc	r20, r1
 4ca:	51 05       	cpc	r21, r1
 4cc:	71 f6       	brne	.-100    	; 0x46a <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 4ce:	08 95       	ret

000004d0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 4d0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 4d2:	84 b5       	in	r24, 0x24	; 36
 4d4:	82 60       	ori	r24, 0x02	; 2
 4d6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 4d8:	84 b5       	in	r24, 0x24	; 36
 4da:	81 60       	ori	r24, 0x01	; 1
 4dc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 4de:	85 b5       	in	r24, 0x25	; 37
 4e0:	82 60       	ori	r24, 0x02	; 2
 4e2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 4e4:	85 b5       	in	r24, 0x25	; 37
 4e6:	81 60       	ori	r24, 0x01	; 1
 4e8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 4ea:	ee e6       	ldi	r30, 0x6E	; 110
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	81 60       	ori	r24, 0x01	; 1
 4f2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 4f4:	e1 e8       	ldi	r30, 0x81	; 129
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 4fa:	80 81       	ld	r24, Z
 4fc:	82 60       	ori	r24, 0x02	; 2
 4fe:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 500:	80 81       	ld	r24, Z
 502:	81 60       	ori	r24, 0x01	; 1
 504:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 506:	e0 e8       	ldi	r30, 0x80	; 128
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	81 60       	ori	r24, 0x01	; 1
 50e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 510:	e1 eb       	ldi	r30, 0xB1	; 177
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	84 60       	ori	r24, 0x04	; 4
 518:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 51a:	e0 eb       	ldi	r30, 0xB0	; 176
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	81 60       	ori	r24, 0x01	; 1
 522:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 524:	e1 e9       	ldi	r30, 0x91	; 145
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	82 60       	ori	r24, 0x02	; 2
 52c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 52e:	80 81       	ld	r24, Z
 530:	81 60       	ori	r24, 0x01	; 1
 532:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 534:	e0 e9       	ldi	r30, 0x90	; 144
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	81 60       	ori	r24, 0x01	; 1
 53c:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 53e:	e1 ea       	ldi	r30, 0xA1	; 161
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	82 60       	ori	r24, 0x02	; 2
 546:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 548:	80 81       	ld	r24, Z
 54a:	81 60       	ori	r24, 0x01	; 1
 54c:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 54e:	e0 ea       	ldi	r30, 0xA0	; 160
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	81 60       	ori	r24, 0x01	; 1
 556:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 558:	e1 e2       	ldi	r30, 0x21	; 33
 55a:	f1 e0       	ldi	r31, 0x01	; 1
 55c:	80 81       	ld	r24, Z
 55e:	82 60       	ori	r24, 0x02	; 2
 560:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 562:	80 81       	ld	r24, Z
 564:	81 60       	ori	r24, 0x01	; 1
 566:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 568:	e0 e2       	ldi	r30, 0x20	; 32
 56a:	f1 e0       	ldi	r31, 0x01	; 1
 56c:	80 81       	ld	r24, Z
 56e:	81 60       	ori	r24, 0x01	; 1
 570:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 572:	ea e7       	ldi	r30, 0x7A	; 122
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	84 60       	ori	r24, 0x04	; 4
 57a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 57c:	80 81       	ld	r24, Z
 57e:	82 60       	ori	r24, 0x02	; 2
 580:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 582:	80 81       	ld	r24, Z
 584:	81 60       	ori	r24, 0x01	; 1
 586:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 588:	80 81       	ld	r24, Z
 58a:	80 68       	ori	r24, 0x80	; 128
 58c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 58e:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 592:	08 95       	ret

00000594 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
 594:	1f 93       	push	r17
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	18 2f       	mov	r17, r24
 59c:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
 59e:	61 e0       	ldi	r22, 0x01	; 1
 5a0:	0e 94 aa 03 	call	0x754	; 0x754 <pinMode>
	if (val == 0)
 5a4:	20 97       	sbiw	r28, 0x00	; 0
 5a6:	09 f4       	brne	.+2      	; 0x5aa <analogWrite+0x16>
 5a8:	ca c0       	rjmp	.+404    	; 0x73e <analogWrite+0x1aa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
 5aa:	cf 3f       	cpi	r28, 0xFF	; 255
 5ac:	d1 05       	cpc	r29, r1
 5ae:	09 f4       	brne	.+2      	; 0x5b2 <analogWrite+0x1e>
 5b0:	c9 c0       	rjmp	.+402    	; 0x744 <analogWrite+0x1b0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
 5b2:	e1 2f       	mov	r30, r17
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	e2 54       	subi	r30, 0x42	; 66
 5b8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ba:	84 91       	lpm	r24, Z+
 5bc:	89 30       	cpi	r24, 0x09	; 9
 5be:	09 f4       	brne	.+2      	; 0x5c2 <analogWrite+0x2e>
 5c0:	66 c0       	rjmp	.+204    	; 0x68e <analogWrite+0xfa>
 5c2:	8a 30       	cpi	r24, 0x0A	; 10
 5c4:	b0 f4       	brcc	.+44     	; 0x5f2 <analogWrite+0x5e>
 5c6:	84 30       	cpi	r24, 0x04	; 4
 5c8:	f1 f1       	breq	.+124    	; 0x646 <analogWrite+0xb2>
 5ca:	85 30       	cpi	r24, 0x05	; 5
 5cc:	40 f4       	brcc	.+16     	; 0x5de <analogWrite+0x4a>
 5ce:	82 30       	cpi	r24, 0x02	; 2
 5d0:	59 f1       	breq	.+86     	; 0x628 <analogWrite+0x94>
 5d2:	83 30       	cpi	r24, 0x03	; 3
 5d4:	70 f5       	brcc	.+92     	; 0x632 <analogWrite+0x9e>
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	09 f0       	breq	.+2      	; 0x5dc <analogWrite+0x48>
 5da:	ae c0       	rjmp	.+348    	; 0x738 <analogWrite+0x1a4>
 5dc:	20 c0       	rjmp	.+64     	; 0x61e <analogWrite+0x8a>
 5de:	87 30       	cpi	r24, 0x07	; 7
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <analogWrite+0x50>
 5e2:	43 c0       	rjmp	.+134    	; 0x66a <analogWrite+0xd6>
 5e4:	88 30       	cpi	r24, 0x08	; 8
 5e6:	08 f0       	brcs	.+2      	; 0x5ea <analogWrite+0x56>
 5e8:	48 c0       	rjmp	.+144    	; 0x67a <analogWrite+0xe6>
 5ea:	86 30       	cpi	r24, 0x06	; 6
 5ec:	09 f0       	breq	.+2      	; 0x5f0 <analogWrite+0x5c>
 5ee:	a4 c0       	rjmp	.+328    	; 0x738 <analogWrite+0x1a4>
 5f0:	34 c0       	rjmp	.+104    	; 0x65a <analogWrite+0xc6>
 5f2:	8d 30       	cpi	r24, 0x0D	; 13
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <analogWrite+0x64>
 5f6:	78 c0       	rjmp	.+240    	; 0x6e8 <analogWrite+0x154>
 5f8:	8e 30       	cpi	r24, 0x0E	; 14
 5fa:	38 f4       	brcc	.+14     	; 0x60a <analogWrite+0x76>
 5fc:	8b 30       	cpi	r24, 0x0B	; 11
 5fe:	09 f4       	brne	.+2      	; 0x602 <analogWrite+0x6e>
 600:	5a c0       	rjmp	.+180    	; 0x6b6 <analogWrite+0x122>
 602:	8c 30       	cpi	r24, 0x0C	; 12
 604:	08 f0       	brcs	.+2      	; 0x608 <analogWrite+0x74>
 606:	66 c0       	rjmp	.+204    	; 0x6d4 <analogWrite+0x140>
 608:	4c c0       	rjmp	.+152    	; 0x6a2 <analogWrite+0x10e>
 60a:	80 31       	cpi	r24, 0x10	; 16
 60c:	09 f4       	brne	.+2      	; 0x610 <analogWrite+0x7c>
 60e:	80 c0       	rjmp	.+256    	; 0x710 <analogWrite+0x17c>
 610:	81 31       	cpi	r24, 0x11	; 17
 612:	09 f4       	brne	.+2      	; 0x616 <analogWrite+0x82>
 614:	87 c0       	rjmp	.+270    	; 0x724 <analogWrite+0x190>
 616:	8f 30       	cpi	r24, 0x0F	; 15
 618:	09 f0       	breq	.+2      	; 0x61c <analogWrite+0x88>
 61a:	8e c0       	rjmp	.+284    	; 0x738 <analogWrite+0x1a4>
 61c:	6f c0       	rjmp	.+222    	; 0x6fc <analogWrite+0x168>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
 61e:	84 b5       	in	r24, 0x24	; 36
 620:	80 68       	ori	r24, 0x80	; 128
 622:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
 624:	c7 bd       	out	0x27, r28	; 39
 626:	92 c0       	rjmp	.+292    	; 0x74c <analogWrite+0x1b8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
 628:	84 b5       	in	r24, 0x24	; 36
 62a:	80 62       	ori	r24, 0x20	; 32
 62c:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
 62e:	c8 bd       	out	0x28, r28	; 40
 630:	8d c0       	rjmp	.+282    	; 0x74c <analogWrite+0x1b8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
 632:	80 91 80 00 	lds	r24, 0x0080
 636:	80 68       	ori	r24, 0x80	; 128
 638:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
 63c:	d0 93 89 00 	sts	0x0089, r29
 640:	c0 93 88 00 	sts	0x0088, r28
 644:	83 c0       	rjmp	.+262    	; 0x74c <analogWrite+0x1b8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
 646:	80 91 80 00 	lds	r24, 0x0080
 64a:	80 62       	ori	r24, 0x20	; 32
 64c:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
 650:	d0 93 8b 00 	sts	0x008B, r29
 654:	c0 93 8a 00 	sts	0x008A, r28
 658:	79 c0       	rjmp	.+242    	; 0x74c <analogWrite+0x1b8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
 65a:	80 91 b0 00 	lds	r24, 0x00B0
 65e:	80 68       	ori	r24, 0x80	; 128
 660:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
 664:	c0 93 b3 00 	sts	0x00B3, r28
 668:	71 c0       	rjmp	.+226    	; 0x74c <analogWrite+0x1b8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
 66a:	80 91 b0 00 	lds	r24, 0x00B0
 66e:	80 62       	ori	r24, 0x20	; 32
 670:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
 674:	c0 93 b4 00 	sts	0x00B4, r28
 678:	69 c0       	rjmp	.+210    	; 0x74c <analogWrite+0x1b8>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
 67a:	80 91 90 00 	lds	r24, 0x0090
 67e:	80 68       	ori	r24, 0x80	; 128
 680:	80 93 90 00 	sts	0x0090, r24
				OCR3A = val; // set pwm duty
 684:	d0 93 99 00 	sts	0x0099, r29
 688:	c0 93 98 00 	sts	0x0098, r28
 68c:	5f c0       	rjmp	.+190    	; 0x74c <analogWrite+0x1b8>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
 68e:	80 91 90 00 	lds	r24, 0x0090
 692:	80 62       	ori	r24, 0x20	; 32
 694:	80 93 90 00 	sts	0x0090, r24
				OCR3B = val; // set pwm duty
 698:	d0 93 9b 00 	sts	0x009B, r29
 69c:	c0 93 9a 00 	sts	0x009A, r28
 6a0:	55 c0       	rjmp	.+170    	; 0x74c <analogWrite+0x1b8>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
 6a2:	80 91 90 00 	lds	r24, 0x0090
 6a6:	88 60       	ori	r24, 0x08	; 8
 6a8:	80 93 90 00 	sts	0x0090, r24
				OCR3C = val; // set pwm duty
 6ac:	d0 93 9d 00 	sts	0x009D, r29
 6b0:	c0 93 9c 00 	sts	0x009C, r28
 6b4:	4b c0       	rjmp	.+150    	; 0x74c <analogWrite+0x1b8>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
 6b6:	80 91 a0 00 	lds	r24, 0x00A0
 6ba:	80 68       	ori	r24, 0x80	; 128
 6bc:	80 93 a0 00 	sts	0x00A0, r24
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
 6c0:	80 91 a0 00 	lds	r24, 0x00A0
 6c4:	8f 7b       	andi	r24, 0xBF	; 191
 6c6:	80 93 a0 00 	sts	0x00A0, r24
				#endif
				OCR4A = val;	// set pwm duty
 6ca:	d0 93 a9 00 	sts	0x00A9, r29
 6ce:	c0 93 a8 00 	sts	0x00A8, r28
 6d2:	3c c0       	rjmp	.+120    	; 0x74c <analogWrite+0x1b8>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
 6d4:	80 91 a0 00 	lds	r24, 0x00A0
 6d8:	80 62       	ori	r24, 0x20	; 32
 6da:	80 93 a0 00 	sts	0x00A0, r24
				OCR4B = val; // set pwm duty
 6de:	d0 93 ab 00 	sts	0x00AB, r29
 6e2:	c0 93 aa 00 	sts	0x00AA, r28
 6e6:	32 c0       	rjmp	.+100    	; 0x74c <analogWrite+0x1b8>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
 6e8:	80 91 a0 00 	lds	r24, 0x00A0
 6ec:	88 60       	ori	r24, 0x08	; 8
 6ee:	80 93 a0 00 	sts	0x00A0, r24
				OCR4C = val; // set pwm duty
 6f2:	d0 93 ad 00 	sts	0x00AD, r29
 6f6:	c0 93 ac 00 	sts	0x00AC, r28
 6fa:	28 c0       	rjmp	.+80     	; 0x74c <analogWrite+0x1b8>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
 6fc:	80 91 20 01 	lds	r24, 0x0120
 700:	80 68       	ori	r24, 0x80	; 128
 702:	80 93 20 01 	sts	0x0120, r24
				OCR5A = val; // set pwm duty
 706:	d0 93 29 01 	sts	0x0129, r29
 70a:	c0 93 28 01 	sts	0x0128, r28
 70e:	1e c0       	rjmp	.+60     	; 0x74c <analogWrite+0x1b8>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
 710:	80 91 20 01 	lds	r24, 0x0120
 714:	80 62       	ori	r24, 0x20	; 32
 716:	80 93 20 01 	sts	0x0120, r24
				OCR5B = val; // set pwm duty
 71a:	d0 93 2b 01 	sts	0x012B, r29
 71e:	c0 93 2a 01 	sts	0x012A, r28
 722:	14 c0       	rjmp	.+40     	; 0x74c <analogWrite+0x1b8>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
 724:	80 91 20 01 	lds	r24, 0x0120
 728:	88 60       	ori	r24, 0x08	; 8
 72a:	80 93 20 01 	sts	0x0120, r24
				OCR5C = val; // set pwm duty
 72e:	d0 93 2d 01 	sts	0x012D, r29
 732:	c0 93 2c 01 	sts	0x012C, r28
 736:	0a c0       	rjmp	.+20     	; 0x74c <analogWrite+0x1b8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
 738:	c0 38       	cpi	r28, 0x80	; 128
 73a:	d1 05       	cpc	r29, r1
 73c:	1c f4       	brge	.+6      	; 0x744 <analogWrite+0x1b0>
					digitalWrite(pin, LOW);
 73e:	81 2f       	mov	r24, r17
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	02 c0       	rjmp	.+4      	; 0x748 <analogWrite+0x1b4>
				} else {
					digitalWrite(pin, HIGH);
 744:	81 2f       	mov	r24, r17
 746:	61 e0       	ldi	r22, 0x01	; 1
 748:	0e 94 5d 04 	call	0x8ba	; 0x8ba <digitalWrite>
				}
		}
	}
}
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	1f 91       	pop	r17
 752:	08 95       	ret

00000754 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 754:	cf 93       	push	r28
 756:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 758:	48 2f       	mov	r20, r24
 75a:	50 e0       	ldi	r21, 0x00	; 0
 75c:	ca 01       	movw	r24, r20
 75e:	88 58       	subi	r24, 0x88	; 136
 760:	9e 4f       	sbci	r25, 0xFE	; 254
 762:	fc 01       	movw	r30, r24
 764:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
 766:	4e 5c       	subi	r20, 0xCE	; 206
 768:	5e 4f       	sbci	r21, 0xFE	; 254
 76a:	fa 01       	movw	r30, r20
 76c:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 76e:	88 23       	and	r24, r24
 770:	69 f1       	breq	.+90     	; 0x7cc <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	fc 01       	movw	r30, r24
 77a:	ec 51       	subi	r30, 0x1C	; 28
 77c:	ff 4f       	sbci	r31, 0xFF	; 255
 77e:	a5 91       	lpm	r26, Z+
 780:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
 782:	fc 01       	movw	r30, r24
 784:	e2 50       	subi	r30, 0x02	; 2
 786:	ff 4f       	sbci	r31, 0xFF	; 255
 788:	c5 91       	lpm	r28, Z+
 78a:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
 78c:	66 23       	and	r22, r22
 78e:	51 f4       	brne	.+20     	; 0x7a4 <pinMode+0x50>
		uint8_t oldSREG = SREG;
 790:	2f b7       	in	r18, 0x3f	; 63
                cli();
 792:	f8 94       	cli
		*reg &= ~bit;
 794:	8c 91       	ld	r24, X
 796:	93 2f       	mov	r25, r19
 798:	90 95       	com	r25
 79a:	89 23       	and	r24, r25
 79c:	8c 93       	st	X, r24
		*out &= ~bit;
 79e:	88 81       	ld	r24, Y
 7a0:	89 23       	and	r24, r25
 7a2:	0b c0       	rjmp	.+22     	; 0x7ba <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 7a4:	62 30       	cpi	r22, 0x02	; 2
 7a6:	61 f4       	brne	.+24     	; 0x7c0 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
 7a8:	2f b7       	in	r18, 0x3f	; 63
                cli();
 7aa:	f8 94       	cli
		*reg &= ~bit;
 7ac:	8c 91       	ld	r24, X
 7ae:	93 2f       	mov	r25, r19
 7b0:	90 95       	com	r25
 7b2:	89 23       	and	r24, r25
 7b4:	8c 93       	st	X, r24
		*out |= bit;
 7b6:	88 81       	ld	r24, Y
 7b8:	83 2b       	or	r24, r19
 7ba:	88 83       	st	Y, r24
		SREG = oldSREG;
 7bc:	2f bf       	out	0x3f, r18	; 63
 7be:	06 c0       	rjmp	.+12     	; 0x7cc <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
 7c0:	9f b7       	in	r25, 0x3f	; 63
                cli();
 7c2:	f8 94       	cli
		*reg |= bit;
 7c4:	8c 91       	ld	r24, X
 7c6:	83 2b       	or	r24, r19
 7c8:	8c 93       	st	X, r24
		SREG = oldSREG;
 7ca:	9f bf       	out	0x3f, r25	; 63
	}
}
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	08 95       	ret

000007d2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 7d2:	89 30       	cpi	r24, 0x09	; 9
 7d4:	09 f4       	brne	.+2      	; 0x7d8 <turnOffPWM+0x6>
 7d6:	49 c0       	rjmp	.+146    	; 0x86a <turnOffPWM+0x98>
 7d8:	8a 30       	cpi	r24, 0x0A	; 10
 7da:	a0 f4       	brcc	.+40     	; 0x804 <turnOffPWM+0x32>
 7dc:	84 30       	cpi	r24, 0x04	; 4
 7de:	51 f1       	breq	.+84     	; 0x834 <turnOffPWM+0x62>
 7e0:	85 30       	cpi	r24, 0x05	; 5
 7e2:	40 f4       	brcc	.+16     	; 0x7f4 <turnOffPWM+0x22>
 7e4:	82 30       	cpi	r24, 0x02	; 2
 7e6:	79 f1       	breq	.+94     	; 0x846 <turnOffPWM+0x74>
 7e8:	83 30       	cpi	r24, 0x03	; 3
 7ea:	00 f5       	brcc	.+64     	; 0x82c <turnOffPWM+0x5a>
 7ec:	81 30       	cpi	r24, 0x01	; 1
 7ee:	09 f0       	breq	.+2      	; 0x7f2 <turnOffPWM+0x20>
 7f0:	63 c0       	rjmp	.+198    	; 0x8b8 <turnOffPWM+0xe6>
 7f2:	26 c0       	rjmp	.+76     	; 0x840 <turnOffPWM+0x6e>
 7f4:	87 30       	cpi	r24, 0x07	; 7
 7f6:	79 f1       	breq	.+94     	; 0x856 <turnOffPWM+0x84>
 7f8:	88 30       	cpi	r24, 0x08	; 8
 7fa:	98 f5       	brcc	.+102    	; 0x862 <turnOffPWM+0x90>
 7fc:	86 30       	cpi	r24, 0x06	; 6
 7fe:	09 f0       	breq	.+2      	; 0x802 <turnOffPWM+0x30>
 800:	5b c0       	rjmp	.+182    	; 0x8b8 <turnOffPWM+0xe6>
 802:	25 c0       	rjmp	.+74     	; 0x84e <turnOffPWM+0x7c>
 804:	8d 30       	cpi	r24, 0x0D	; 13
 806:	09 f4       	brne	.+2      	; 0x80a <turnOffPWM+0x38>
 808:	42 c0       	rjmp	.+132    	; 0x88e <turnOffPWM+0xbc>
 80a:	8e 30       	cpi	r24, 0x0E	; 14
 80c:	28 f4       	brcc	.+10     	; 0x818 <turnOffPWM+0x46>
 80e:	8b 30       	cpi	r24, 0x0B	; 11
 810:	b1 f1       	breq	.+108    	; 0x87e <turnOffPWM+0xac>
 812:	8c 30       	cpi	r24, 0x0C	; 12
 814:	c0 f5       	brcc	.+112    	; 0x886 <turnOffPWM+0xb4>
 816:	2d c0       	rjmp	.+90     	; 0x872 <turnOffPWM+0xa0>
 818:	80 31       	cpi	r24, 0x10	; 16
 81a:	09 f4       	brne	.+2      	; 0x81e <turnOffPWM+0x4c>
 81c:	42 c0       	rjmp	.+132    	; 0x8a2 <turnOffPWM+0xd0>
 81e:	81 31       	cpi	r24, 0x11	; 17
 820:	09 f4       	brne	.+2      	; 0x824 <turnOffPWM+0x52>
 822:	45 c0       	rjmp	.+138    	; 0x8ae <turnOffPWM+0xdc>
 824:	8f 30       	cpi	r24, 0x0F	; 15
 826:	09 f0       	breq	.+2      	; 0x82a <turnOffPWM+0x58>
 828:	47 c0       	rjmp	.+142    	; 0x8b8 <turnOffPWM+0xe6>
 82a:	37 c0       	rjmp	.+110    	; 0x89a <turnOffPWM+0xc8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 82c:	80 91 80 00 	lds	r24, 0x0080
 830:	8f 77       	andi	r24, 0x7F	; 127
 832:	03 c0       	rjmp	.+6      	; 0x83a <turnOffPWM+0x68>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 834:	80 91 80 00 	lds	r24, 0x0080
 838:	8f 7d       	andi	r24, 0xDF	; 223
 83a:	80 93 80 00 	sts	0x0080, r24
 83e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 840:	84 b5       	in	r24, 0x24	; 36
 842:	8f 77       	andi	r24, 0x7F	; 127
 844:	02 c0       	rjmp	.+4      	; 0x84a <turnOffPWM+0x78>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 846:	84 b5       	in	r24, 0x24	; 36
 848:	8f 7d       	andi	r24, 0xDF	; 223
 84a:	84 bd       	out	0x24, r24	; 36
 84c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 84e:	80 91 b0 00 	lds	r24, 0x00B0
 852:	8f 77       	andi	r24, 0x7F	; 127
 854:	03 c0       	rjmp	.+6      	; 0x85c <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 856:	80 91 b0 00 	lds	r24, 0x00B0
 85a:	8f 7d       	andi	r24, 0xDF	; 223
 85c:	80 93 b0 00 	sts	0x00B0, r24
 860:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 862:	80 91 90 00 	lds	r24, 0x0090
 866:	8f 77       	andi	r24, 0x7F	; 127
 868:	07 c0       	rjmp	.+14     	; 0x878 <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 86a:	80 91 90 00 	lds	r24, 0x0090
 86e:	8f 7d       	andi	r24, 0xDF	; 223
 870:	03 c0       	rjmp	.+6      	; 0x878 <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 872:	80 91 90 00 	lds	r24, 0x0090
 876:	87 7f       	andi	r24, 0xF7	; 247
 878:	80 93 90 00 	sts	0x0090, r24
 87c:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 87e:	80 91 a0 00 	lds	r24, 0x00A0
 882:	8f 77       	andi	r24, 0x7F	; 127
 884:	07 c0       	rjmp	.+14     	; 0x894 <turnOffPWM+0xc2>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 886:	80 91 a0 00 	lds	r24, 0x00A0
 88a:	8f 7d       	andi	r24, 0xDF	; 223
 88c:	03 c0       	rjmp	.+6      	; 0x894 <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 88e:	80 91 a0 00 	lds	r24, 0x00A0
 892:	87 7f       	andi	r24, 0xF7	; 247
 894:	80 93 a0 00 	sts	0x00A0, r24
 898:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 89a:	80 91 20 01 	lds	r24, 0x0120
 89e:	8f 77       	andi	r24, 0x7F	; 127
 8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <turnOffPWM+0xd6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 8a2:	80 91 20 01 	lds	r24, 0x0120
 8a6:	8f 7d       	andi	r24, 0xDF	; 223
 8a8:	80 93 20 01 	sts	0x0120, r24
 8ac:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 8ae:	80 91 20 01 	lds	r24, 0x0120
 8b2:	87 7f       	andi	r24, 0xF7	; 247
 8b4:	80 93 20 01 	sts	0x0120, r24
 8b8:	08 95       	ret

000008ba <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 8ba:	ff 92       	push	r15
 8bc:	0f 93       	push	r16
 8be:	1f 93       	push	r17
 8c0:	f6 2e       	mov	r15, r22
	uint8_t timer = digitalPinToTimer(pin);
 8c2:	48 2f       	mov	r20, r24
 8c4:	50 e0       	ldi	r21, 0x00	; 0
 8c6:	ca 01       	movw	r24, r20
 8c8:	82 54       	subi	r24, 0x42	; 66
 8ca:	9e 4f       	sbci	r25, 0xFE	; 254
 8cc:	fc 01       	movw	r30, r24
 8ce:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
 8d0:	ca 01       	movw	r24, r20
 8d2:	88 58       	subi	r24, 0x88	; 136
 8d4:	9e 4f       	sbci	r25, 0xFE	; 254
 8d6:	fc 01       	movw	r30, r24
 8d8:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
 8da:	4e 5c       	subi	r20, 0xCE	; 206
 8dc:	5e 4f       	sbci	r21, 0xFE	; 254
 8de:	fa 01       	movw	r30, r20
 8e0:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 8e2:	00 23       	and	r16, r16
 8e4:	c9 f0       	breq	.+50     	; 0x918 <digitalWrite+0x5e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 8e6:	22 23       	and	r18, r18
 8e8:	19 f0       	breq	.+6      	; 0x8f0 <digitalWrite+0x36>
 8ea:	82 2f       	mov	r24, r18
 8ec:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <turnOffPWM>

	out = portOutputRegister(port);
 8f0:	e0 2f       	mov	r30, r16
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	ee 0f       	add	r30, r30
 8f6:	ff 1f       	adc	r31, r31
 8f8:	e2 50       	subi	r30, 0x02	; 2
 8fa:	ff 4f       	sbci	r31, 0xFF	; 255
 8fc:	a5 91       	lpm	r26, Z+
 8fe:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
 900:	9f b7       	in	r25, 0x3f	; 63
	cli();
 902:	f8 94       	cli

	if (val == LOW) {
 904:	ff 20       	and	r15, r15
 906:	21 f4       	brne	.+8      	; 0x910 <digitalWrite+0x56>
		*out &= ~bit;
 908:	8c 91       	ld	r24, X
 90a:	10 95       	com	r17
 90c:	81 23       	and	r24, r17
 90e:	02 c0       	rjmp	.+4      	; 0x914 <digitalWrite+0x5a>
	} else {
		*out |= bit;
 910:	8c 91       	ld	r24, X
 912:	81 2b       	or	r24, r17
 914:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
 916:	9f bf       	out	0x3f, r25	; 63
}
 918:	1f 91       	pop	r17
 91a:	0f 91       	pop	r16
 91c:	ff 90       	pop	r15
 91e:	08 95       	ret

00000920 <_exit>:
 920:	f8 94       	cli

00000922 <__stop_program>:
 922:	ff cf       	rjmp	.-2      	; 0x922 <__stop_program>
